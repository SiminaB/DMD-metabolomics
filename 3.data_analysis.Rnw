\documentclass{article}

\title{Statistical data analysis}

\begin{document}

\maketitle

<<>>=
opts_chunk$set(echo=TRUE, fig.path='figures/', cache=FALSE, dev='pdf')##postscript')
@

\section{Load all libraries, functions, and data}

Load everything, check structure of data objects:

<<loadAndSource, echo=TRUE>>=
library(ggplot2)
library(reshape)
library(genefilter)
library(RColorBrewer) 
library(grid)
library(corrplot)
library(ROCR)

source("functions.R")

load("MasterFrame.RData")
@

\section{Compare DMD cases and healthy controls considering the effects of age and study site}

\subsection{Fit regression models}

Fit a linear model with transformed metabolite intensities as outcomes, regressing on DMD status, age, their interaction, and study site. Compare it to a model which has just age and study center, testing whether the coefficients of DMD and of DMD x age are 0. Thus, the test is to see whether there is any effect of DMD on the intensities in the presence of age.
<<testDMDage, echo=TRUE>>=
##get p-values for testing whether there is any effect of DMD
##(so compare this model to just a model for age and study center)
pValsAnyDMD <- vapply(MasterFrame[,mets],
                      function(metInt, status, age, site){
                        ##interaction model
                        lm.metInt <- lm(metInt ~ status*age + as.factor(site));
                        ##age-only model
                        lm.metAge <- lm(metInt ~ age + as.factor(site));
                        anova(lm.metInt, lm.metAge)["Pr(>F)"][2,1]  
                      }, 
                      FUN.VALUE = 0.1,
                      MasterFrame$Status, MasterFrame$Age, MasterFrame$Site)
@

\subsection{Find top peaks}

Now look at how many of the peaks have q-values less than or equal to 0.05 and 0.01 (use just the 0.01 moving forward), so that the false
discovery rate is controlled at 0.05 and 0.01, as well as how many peaks are significant at a Bonferroni-corrected threshold of 0.05:
<<qvalsDMDage, echo=TRUE>>=
qValsAnyDMD <- p.adjust(pValsAnyDMD, method="BH")
length(qValsAnyDMD)
sum(qValsAnyDMD <= 0.05)
sum(qValsAnyDMD <= 0.01)

topFDRpeaks <- names(which(qValsAnyDMD <= 0.01))
##sort the top peaks by the p-values
topFDRpeaks <- topFDRpeaks[order(pValsAnyDMD[topFDRpeaks])]
topFDRpeaks

topFWERpeaks <- names(which(pValsAnyDMD <= 0.05/length(pValsAnyDMD)))
##sort them by p-value, from lowest to highest
topFWERpeaks <- topFWERpeaks[order(pValsAnyDMD[topFWERpeaks])]
topFWERpeaks
@

Add in the most likely annotations for these peaks:
<<peakAnno, echo=TRUE>>=
##get their most likely annotations
AnnTopFWERpeaks <- topFWERpeaks 
names(AnnTopFWERpeaks) <- topFWERpeaks
AnnTopFWERpeaks["M357T30p"] <- "m/z=357.25"
AnnTopFWERpeaks["M114T37p"] <- "Creatinine"
AnnTopFWERpeaks["M369T366n"] <- "5a-DHT"
AnnTopFWERpeaks["M367T347n"] <- "Testost. sulf."
AnnTopFWERpeaks["M312T36p"] <- "m/z=312.01"
AnnTopFWERpeaks["M132T37p"] <- "Creatine"
AnnTopFWERpeaks["M451T372p"] <- "m/z=451.17"
AnnTopFWERpeaks["M270T359p"] <- "m/z=270.32"
AnnTopFWERpeaks["M397T369n"] <- "m/z=397.21"
AnnTopFWERpeaks["M174T37p"] <- "Arginine"
AnnTopFWERpeaks["M449T366n"] <- "m/z=449.25"
AnnTopFWERpeaks["M357T41n"] <- "m/z=357.03"
AnnTopFWERpeaks["M209T321p"] <- "m/z=209.12"
AnnTopFWERpeaks["M432T331p"] <- "m/z=432.24"

##add in annotations for the FDR-significant peaks that have annotations
AnnTopFDRpeaks <- topFDRpeaks
names(AnnTopFDRpeaks) <- topFDRpeaks
AnnTopFDRpeaks[names(AnnTopFWERpeaks)] <- AnnTopFWERpeaks
@

\subsection{Plots for top peaks}

Make some nice plots for them:
<<topMetsDMDage, echo=TRUE, fig.height=8, fig.width=22>>=
##save all the top plots in list
ggTop <- list()
##also save all boxplots in list
ggTopBox <- list()
##get all sites
sites <- levels(MasterFrame$Site)
nrSites <- length(sites)
for(met in topFDRpeaks)
{
  lmMet <- lm(MasterFrame[,met] ~ 
                MasterFrame[,"Status"]*MasterFrame[,"Age"]+as.factor(MasterFrame[,"Site"]), 
              data=MasterFrame)
  lmMet

  pred <- predict(lmMet)
  
  ##get the linear model predictions for Calgary controls and DMD
  whichCalgContr <- which(MasterFrame$Site == "Calgary" &
                            MasterFrame$Status == "Control")
  whichCalgDMD <- which(MasterFrame$Site == "Calgary" &
                          MasterFrame$Status == "DMD")  
  predCalgContr <- cbind(MasterFrame$Age[whichCalgContr],
                         pred[whichCalgContr])
  predCalgDMD <- cbind(MasterFrame$Age[whichCalgDMD],
                       pred[whichCalgDMD])
  
  ##get the linear model predictions for the Davis group (only DMD)
  whichDavis <- which(MasterFrame$Site == "UC Davis")
  predDavis <- cbind(MasterFrame$Age[whichDavis],
                     pred[whichDavis])
  
  ##get the values for min and max age for these groups (to plot the segments)
  CalgDMDseg <- matrix(c(min(predCalgDMD[,1]), 
                         predCalgDMD[which.min(predCalgDMD[,1]),2],
                         max(predCalgDMD[,1]), 
                         predCalgDMD[which.max(predCalgDMD[,1]),2]),
                       nrow=2, byrow=TRUE)
  CalgContrSeg <- matrix(c(min(predCalgContr[,1]), 
                           predCalgContr[which.min(predCalgContr[,1]),2],
                           max(predCalgContr[,1]), 
                           predCalgContr[which.max(predCalgContr[,1]),2]),
                         nrow=2, byrow=TRUE)  
  DavisDMDseg <- matrix(c(min(predDavis[,1]), 
                          predDavis[which.min(predDavis[,1]),2],
                          max(predDavis[,1]), 
                          predDavis[which.max(predDavis[,1]),2]),
                        nrow=2, byrow=TRUE)
  segs <- data.frame(Site = c("Calgary", "Calgary", "UC Davis"),
                     Status = c("DMD", "Control", "DMD"),
                     x = c(CalgDMDseg[1,1], CalgContrSeg[1,1], DavisDMDseg[1,1]),
                     y = c(CalgDMDseg[1,2], CalgContrSeg[1,2], DavisDMDseg[1,2]),
                     xend = c(CalgDMDseg[2,1], CalgContrSeg[2,1], DavisDMDseg[2,1]),
                     yend = c(CalgDMDseg[2,2], CalgContrSeg[2,2], DavisDMDseg[2,2]))
                     
  ggTop[[met]] <- ggplot(MasterFrame, aes_string(x="Age", y=met, shape="Status", color="Status")) +
    geom_point(size=2.5) +
    geom_segment(data=segs, aes(x=x, y=y, 
                                xend=xend, yend=yend),
                 size=1.1) +
    scale_color_manual(name = "Class", 
                       breaks = c("Control", "DMD"),
                       labels = c("Control", "DMD"),
                       values = c(4,2)) +
    scale_shape_manual(name = "Class", 
                       breaks = c("Control", "DMD"),
                       labels = c("Control", "DMD"),
                       values = c(1,2)) +
    scale_y_continuous(name="Normalized intensity") +
    labs(title=(paste(AnnTopFDRpeaks[met], ", ", 
                      "p-value: ", signif(pValsAnyDMD[met],2), ", ",
                      "q-value: ", signif(qValsAnyDMD[met],2),
                      sep=""))) +
    theme(plot.title = element_text(size = 15, hjust = 0.2, vjust=1.5),
          legend.title = element_text(size = 14),
          legend.text = element_text(size=14),
          axis.title = element_text(size=14))
  
  ggTopBox[[met]] <- ggplot(MasterFrame, aes_string(x="Status", y=met))+
    geom_boxplot() +
    geom_point(size=3.0, aes(color=Category)) +
    scale_y_continuous(name="Normalized intensity") +
    labs(title=(paste(AnnTopFDRpeaks[met]))) + 
    scale_color_discrete(name = "Age category") +
    theme(plot.title = element_text(size = 15, hjust = 0.2, vjust=1.5),
          legend.title = element_text(size = 14),
          legend.text = element_text(size=14),
          axis.title = element_text(size=14))
}
@

\subsubsection{Plots versus age for top peaks}

Plots of the intensities versus age, including some of the fitted regression lines, coded by case/control status:

<<Fig 2, echo=TRUE, fig.width=14, fig.height=14>>=
multiplot(plotlist=ggTop, layout=matrix(1:length(ggTop), ncol=2, byrow=TRUE))
@

\subsubsection{Boxplots for case/control status for top peaks}

Boxplots of the intensities versus case control status, color-coded by age category:

<<Fig 3, echo=TRUE, fig.width=9, fig.height=14>>=
multiplot(plotlist=ggTopBox, layout=matrix(1:length(ggTopBox), ncol=2, byrow=TRUE))
@

\subsubsection{Correlation plot for top peaks}

Also calculate and plot the correlations between the top peaks:

<<Fig 4, echo=TRUE>>=
##make it in matrix version as well:
cor.matrix <- matrix(NA, length(topFDRpeaks), length(topFDRpeaks))

for(i1 in 1:length(topFDRpeaks))
{
  for(i2 in 1:length(topFDRpeaks))
  {
    Met1 <- topFDRpeaks[i1]
    Met2 <- topFDRpeaks[i2]
    
    cor.matrix[i1, i2] <- 
      cor(MasterFrame[, Met1], MasterFrame[, Met2])
  }
}
rownames(cor.matrix) <- colnames(cor.matrix) <- AnnTopFDRpeaks[topFDRpeaks]

round(cor.matrix, 2)

par(mar=c(17,16,0.5,0.5)+0.1, oma=c(1,1,1,1),
    cex = 0.95)
corrplot(round(cor.matrix,2), col=rev(brewer.pal(11, "RdGy")),##[c(1,3,5,6,7,9,11)]), 
         method="color",
         tl.pos="lt",
         type="lower", tl.col="black")

@

\section{Compare DMD cases and healthy controls in the subset of study participants aged 4-18}

\subsection{Fit regression models}

Given that the age distributions are different for DMD cases versus healthy controls (more old and more young study participants among the cases), we also consider an analysis which has the age range of 4-18 years.

<<testDMDage4.18, echo=TRUE>>=
MasterFrame4.18 <- MasterFrame[MasterFrame$Age <= 18,]
dim(MasterFrame4.18)
##check that the minimum age is actually 4
min(MasterFrame$Age)

##see how many participants are left now
table(MasterFrame4.18$Status)
table(MasterFrame4.18$Site)
table(MasterFrame4.18$Status, MasterFrame4.18$Site)

##get p-values for testing whether there is any effect of DMD
##(so compare this model to just a model for age)
pValsAnyDMD4.18 <- vapply(MasterFrame4.18[,mets],
                          function(metInt, status, age, site){
                            ##interaction model
                            lm.metInt <- lm(metInt ~ status*age + as.factor(site));
                            ##age-only model
                            lm.metAge <- lm(metInt ~ age + as.factor(site));
                            anova(lm.metInt, lm.metAge)["Pr(>F)"][2,1]
                          }, 
                          FUN.VALUE = 0.1,
                          MasterFrame4.18$Status, MasterFrame4.18$Age, MasterFrame4.18$Site)
@

\subsection{Find top peaks}

Now look at how many of the peaks have q-values less than or equal to 0.05 and 0.01 (use just the 0.01 moving forward), so that the false
discovery rate is controlled at 0.05 and 0.01, as well as how many peaks are significant at a Bonferroni-corrected threshold of 0.05:
<<qvalsDMDage4.18, echo=TRUE>>=
qValsAnyDMD4.18 <- p.adjust(pValsAnyDMD4.18, method="BH")
sum(qValsAnyDMD4.18 <= 0.05)
sum(qValsAnyDMD4.18 <= 0.01)
sum(pValsAnyDMD4.18 <= 0.05/length(pValsAnyDMD4.18))

which(pValsAnyDMD4.18 <= 0.05/length(pValsAnyDMD4.18))

topFDRpeaks4.18 <- names(which(qValsAnyDMD4.18 <= 0.01))
topFDRpeaks4.18 <- topFDRpeaks4.18[order(pValsAnyDMD4.18[topFDRpeaks4.18])]

topFWERpeaks4.18 <- names(which(pValsAnyDMD4.18 <= 0.05/length(pValsAnyDMD4.18)))
topFWERpeaks4.18 <- topFWERpeaks4.18[order(pValsAnyDMD4.18[topFWERpeaks4.18])]

sort(pValsAnyDMD4.18[topFWERpeaks4.18])
sort(qValsAnyDMD4.18[topFWERpeaks4.18])
@

\subsection{Comparison between full data analysis and data analysis for ages 4-18}

Now do some comparisons with the full data analysis:
<<pvalsDMDage4.18, echo=TRUE>>=
##what is the intersection with the top FWER peaks when using the whole dataset?
intersect(topFWERpeaks, topFWERpeaks4.18)

##what is the intersection with the top FDR (at 0.01) peaks from the whole dataset?
intersect(topFWERpeaks4.18, topFDRpeaks)

##what is the set difference between the top peaks for ages 4-18 and the top FDR peaks from the whole dataset?
setdiff(topFWERpeaks4.18, topFDRpeaks)

##what are the q-values of the top FDR peaks in the whole dataset in the dataset for ages 4-18?
qValsAnyDMD4.18[topFDRpeaks]
max(qValsAnyDMD4.18[topFDRpeaks])

##what are the ranks of the top peaks for ages 4-18 in the full data analysis?
sort(rank(pValsAnyDMD)[topFWERpeaks4.18])
sort(qValsAnyDMD[topFWERpeaks4.18])

sort(rank(pValsAnyDMD)[topFDRpeaks4.18])
sort(qValsAnyDMD[topFDRpeaks4.18])
@

\section{Compare DMD cases and healthy controls considering the effects of age in Calgary subgroup}

\subsection{Fit regression models}

As a protection against heterogeneity due to site, we repeat this analysis (i.e. linear model considering DMD status, age, and their interaction) in the Calgary subgroup only:

<<testDMDageCalg, echo=TRUE>>=
MasterFrameCalg <- MasterFrame[as.character(MasterFrame$Site) == "Calgary",]
dim(MasterFrameCalg)

##get p-values for testing whether there is any effect of DMD
##(so compare this model to just a model for age)
pValsAnyDMDCalg <- vapply(MasterFrameCalg[,mets],
                          function(metInt, status, age){
                            ##interaction model
                            lm.metInt <- lm(metInt ~ status*age);
                            ##age-only model
                            lm.metAge <- lm(metInt ~ age);
                            anova(lm.metInt, lm.metAge)["Pr(>F)"][2,1]  
                          }, 
                          FUN.VALUE = 0.1,
                          MasterFrameCalg$Status, MasterFrameCalg$Age)
@

\subsection{Find top peaks}

Now look at how many of the peaks have q-values less than or equal to 0.05 and 0.01 (use just the 0.01 moving forward), so that the false
discovery rate is controlled at 0.05 and 0.01, as well as how many peaks are significant at a Bonferroni-corrected threshold of 0.05:
<<qvalsDMDageCalg, echo=TRUE>>=
qValsAnyDMDCalg <- p.adjust(pValsAnyDMDCalg, method="BH")
sum(qValsAnyDMDCalg <= 0.05)
sum(qValsAnyDMDCalg <= 0.01)
sum(pValsAnyDMDCalg <= 0.05/length(pValsAnyDMDCalg))

which(pValsAnyDMDCalg <= 0.05/length(pValsAnyDMDCalg))

topFDRpeaksCalg <- names(which(qValsAnyDMDCalg <= 0.01))
topFDRpeaksCalg <- topFDRpeaksCalg[order(pValsAnyDMDCalg[topFDRpeaksCalg])]

topFWERpeaksCalg <- names(which(pValsAnyDMDCalg <= 0.05/length(pValsAnyDMDCalg)))
topFWERpeaksCalg <- topFWERpeaksCalg[order(pValsAnyDMDCalg[topFWERpeaksCalg])]
@

\subsection{Comparison between full data analysis and Calgary-only data analysis}

Now do some comparisons with the full data analysis:
<<pvalsDMDageCalg, echo=TRUE>>=
##what is the intersection with the top FWER peaks when using the whole dataset?
intersect(topFWERpeaks, topFWERpeaksCalg)

##what is the intersection with the top FDR (at 0.01) peaks from the whole dataset?
intersect(topFWERpeaksCalg, topFDRpeaks)

##what is the set difference between the top Calgary peaks and the top FDR peaks from the whole dataset?
setdiff(topFWERpeaksCalg, topFDRpeaks)

##what are the q-values of the top FDR peaks in the whole dataset in the Calgary dataset?
qValsAnyDMDCalg[topFDRpeaks]
max(qValsAnyDMDCalg[topFDRpeaks])
##what are the ranks of the top FDR peaks in the whole dataset in the Calgary dataset?
sort(rank(pValsAnyDMDCalg)[topFDRpeaks])

##what are the ranks of the top Calgary peaks in the full data analysis?
sort(rank(pValsAnyDMD)[topFWERpeaksCalg])
sort(qValsAnyDMD[topFWERpeaksCalg])

sort(rank(pValsAnyDMD)[topFDRpeaksCalg])
sort(qValsAnyDMD[topFDRpeaksCalg])
@

\section{Fit model to difference between creatine and creatinine}

Note that all the metabolites have been log transformed, so the difference is the same as the log of the ratio.
First create that variable:
<<DiffCreat, echo=TRUE>>=
diffCreat <- MasterFrame[,"M132T37p"]-MasterFrame[,"M114T37p"]
@

Now run the models and compare:
<<FtestDiffCreat, echo=TRUE>>=
##interaction model
lm.metInt <- lm(diffCreat ~ MasterFrame$Status*MasterFrame$Age + as.factor(MasterFrame$Site));
##age-only model
lm.metAge <- lm(diffCreat ~ MasterFrame$Age + as.factor(MasterFrame$Site));
anova(lm.metInt, lm.metAge)["Pr(>F)"][2,1]  
@

Plot versus age:
<<Fig 5, echo=TRUE>>=
lmMet <- lm(diffCreat ~ 
              MasterFrame[,"Status"]*MasterFrame[,"Age"]+as.factor(MasterFrame[,"Site"]), 
            data=MasterFrame)

pred <- predict(lmMet)

##get the linear model predictions for Calgary controls and DMD
whichCalgContr <- which(MasterFrame$Site == "Calgary" &
                          MasterFrame$Status == "Control")
whichCalgDMD <- which(MasterFrame$Site == "Calgary" &
                        MasterFrame$Status == "DMD")  
predCalgContr <- cbind(MasterFrame$Age[whichCalgContr],
                       pred[whichCalgContr])
predCalgDMD <- cbind(MasterFrame$Age[whichCalgDMD],
                     pred[whichCalgDMD])

##get the linear model predictions for the Davis group (only DMD)
whichDavis <- which(MasterFrame$Site == "UC Davis")
predDavis <- cbind(MasterFrame$Age[whichDavis],
                   pred[whichDavis])

##get the values for min and max age for these groups (to plot the segments)
CalgDMDseg <- matrix(c(min(predCalgDMD[,1]), 
                       predCalgDMD[which.min(predCalgDMD[,1]),2],
                       max(predCalgDMD[,1]), 
                       predCalgDMD[which.max(predCalgDMD[,1]),2]),
                     nrow=2, byrow=TRUE)
CalgContrSeg <- matrix(c(min(predCalgContr[,1]), 
                         predCalgContr[which.min(predCalgContr[,1]),2],
                         max(predCalgContr[,1]), 
                         predCalgContr[which.max(predCalgContr[,1]),2]),
                       nrow=2, byrow=TRUE)  
DavisDMDseg <- matrix(c(min(predDavis[,1]), 
                        predDavis[which.min(predDavis[,1]),2],
                        max(predDavis[,1]), 
                        predDavis[which.max(predDavis[,1]),2]),
                      nrow=2, byrow=TRUE)
segs <- data.frame(Site = c("Calgary", "Calgary", "UC Davis"),
                   Status = c("DMD", "Control", "DMD"),
                   x = c(CalgDMDseg[1,1], CalgContrSeg[1,1], DavisDMDseg[1,1]),
                   y = c(CalgDMDseg[1,2], CalgContrSeg[1,2], DavisDMDseg[1,2]),
                   xend = c(CalgDMDseg[2,1], CalgContrSeg[2,1], DavisDMDseg[2,1]),
                   yend = c(CalgDMDseg[2,2], CalgContrSeg[2,2], DavisDMDseg[2,2]))

##add the difference in the log values to the data frame
MasterFrame$diffCreat <- diffCreat

ggplot(MasterFrame, aes_string(x="Age", y="diffCreat", shape="Status", color="Status")) +
  geom_point(size=2.5) +
  geom_segment(data=segs, aes(x=x, y=y, 
                              xend=xend, yend=yend,
                              linetype=Site),
               size=1.1) +
  scale_color_manual(name = "Class", 
                     breaks = c("Control", "DMD"),
                     labels = c("Control", "DMD"),
                     values = c(4,2)) +
  scale_shape_manual(name = "Class", 
                     breaks = c("Control", "DMD"),
                     labels = c("Control", "DMD"),
                     values = c(1,2)) +
  scale_y_continuous(name="Normalized intensity") +
  labs(title=(paste("Creatine/creatinine ratio on the log scale", ", ", 
                    "p-value: ", signif(anova(lm.metInt, lm.metAge)["Pr(>F)"][2,1], 2),  
                    sep=""))) +
  theme(plot.title = element_text(size = 15, hjust = 0.2, vjust=1.5),
        legend.title = element_text(size = 14),
        legend.text = element_text(size=14),
        axis.title = element_text(size=14))
@

\section{Make ROC plots for top metabolites + creatine/creatinine ratio}

<<runROC, echo=TRUE>>=
ggROC <- list()
for(met in c(topFDRpeaks, "diffCreat"))
{
  roc.data <- data.frame()
  
  fit <- glm(as.formula(paste("Status ~", met, "+ Age")),
             data=MasterFrame,
             family=binomial)
  
  prob <- predict(fit, newdata=MasterFrame, type="response")
  pred <- prediction(prob, MasterFrame$Status)
  perf <- performance(pred, measure = "tpr", x.measure = "fpr")
  
  aucTemp <- performance(pred, measure = "auc")
  auc <- aucTemp@y.values[[1]]
    
  roc.data <- rbind(roc.data,
                    data.frame(fpr=unlist(perf@x.values),
                               tpr=unlist(perf@y.values),
                               col="1"))
  
  ggROC[[met]] <- ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr, col=col)) +
    geom_ribbon(alpha=0.2) +
    geom_line(aes(y=tpr)) +
    theme(legend.position = "none",
          plot.title = element_text(size = 15, hjust = 0.5, vjust=1.5))+
    ggtitle(paste0(AnnTopFDRpeaks[met],"\n",
                   "AUC = ", 
                   paste(sort(round(auc,2)))))
}
@

<<S3 Fig, fig.width=15, fig.height=27>>=
multiplot(plotlist=ggROC, layout=matrix(1:length(ggROC), ncol=3, byrow=TRUE))
@

\section{Comparison with CKM for DMD cases}

Only consider cases:
<<subsetCases, echo=TRUE>>=
MasterFrame <- MasterFrame[MasterFrame$Status == "DMD",]
@

\subsection{S2 Figure}

Plot creatine/kinase ratio against CKM:
<<S2 Fig, echo=TRUE, fig.height=6, fig.width=8>>=
plotCKratioComp(MasterFrame, isoform="CKM")
@

\section{Get session info}

Session info:
<<sessInfo, echo=TRUE>>=
sessionInfo()
@

\end{document}


